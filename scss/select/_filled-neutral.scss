@use "styling-base";

@mixin filled-neutral(
  $highlight-class: "select-highlight",
  $arrow-class: "select-arrow"
) {
  @include styling-base.base(
    $highlight-class: $highlight-class,
    $arrow-class: $arrow-class
  );

  .#{$highlight-class} {
    background-color: var(--color-soft);
  }
  .#{$arrow-class} {
    -webkit-mask-image: url('data:image/svg+xml;utf8,<svg fill="black" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>');
    mask-image: url('data:image/svg+xml;utf8,<svg fill="black" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/><path d="M0 0h24v24H0z" fill="none"/></svg>');
    width: 1.5rem;
    height: 1.5rem;
  }

  select:is(:hover, :focus-visible) + .#{$highlight-class} {
    background-color: var(--color-soft-hover);
  }

  select:is(:focus) + .#{$highlight-class} {
    // Use of outline to avoid impacting position of the arrow
    outline: var(--input-outline) solid var(--color-accent);
    outline-offset: calc(-1 * var(--input-outline));
  }

  select:disabled,
  select[disabled] {
    opacity: 50%;
  }
  select:is(:disabled) + .#{$highlight-class} {
    opacity: 50%;
    background-color: transparent;

    // Use of outline to avoid impacting position of the arrow
    outline: var(--input-outline-disabled) solid var(--color-field-border);
    outline-offset: calc(-1 * var(--input-outline-disabled));
  }
}

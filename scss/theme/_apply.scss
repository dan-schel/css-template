@use "color-list";

$-custom-colors: () !default;

@mixin init($custom-colors) {
  @if $custom-colors {
    $-custom-colors: $custom-colors !global;
  }
}

// Sets all css custom properties on this element to the given theme based on
// the css custom properties already defined for each theme.
@mixin apply($theme) {
  // Set --color-accent to --color-{$theme}-accent, etc.
  @each $color-name in color-list.$color-list {
    --color-#{$color-name}: var(--color-#{$theme}-#{$color-name});
  }

  // For each custom color...
  @each $color-name, $_ in $-custom-colors {
    // Set the css custom property for this color to the value in the css
    // custom properties for this color in the desired theme.
    --color-#{$color-name}: var(--color-#{$theme}-#{$color-name});
  }
}

@mixin apply-base($theme) {
  // Separated to support old Safari?
  :root {
    @include apply($theme);
  }
  dialog::backdrop {
    @include apply($theme);
  }
}

// Sets the theme colors on the root and dialog elements for light theme. Must
// be called in the root of a css file (not inside a selector) to work
// correctly.
@mixin light-base {
  @include apply-base("light");
}

// Sets the theme colors on the root and dialog elements for dark theme. Must be
// called in the root of a css file (not inside a selector) to work correctly.
@mixin dark-base {
  @include apply-base("dark");
  // Separated to support old Safari?
  :root {
    color-scheme: dark;
  }
  dialog::backdrop {
    color-scheme: dark;
  }
}

// Sets the theme colors inside this element for light theme.
@mixin light {
  @include apply("light");
}

// Sets the theme colors inside this element for dark theme.
@mixin dark {
  @include apply("dark");
  color-scheme: dark;
}

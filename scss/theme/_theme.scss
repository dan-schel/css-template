@use "sass:meta";
@use "sass:map";

@forward "apply";
@use "apply";

@forward "built-in";
@use "built-in";

@use "color-list";

$-themes: built-in.generate() !default;
$-custom-colors: () !default;

// Called when initing the css-template library. Creates all the css custom
// properties on the root element for each swatch in each theme.
@mixin init($themes, $custom-colors) {
  @if $themes {
    $-themes: $themes !global;
  }
  @if $custom-colors {
    $-custom-colors: $custom-colors !global;
  }

  // Check that all themes have all the colors.
  @each $name, $theme in $-themes {
    @each $color-name in color-list.$color-list {
      @if not map.has-key($theme, $color-name) {
        @error "Theme '#{$name}' is missing color '#{$color-name}'.";
      }
    }
  }

  // TODO: Check that all custom colors have a value for each theme?

  @include apply.init($custom-colors: $custom-colors);
  @include default-styles;
}

@mixin default-styles {
  // Separated to support old Safari?
  :root {
    @include all-swatches;
  }
  dialog::backdrop {
    @include all-swatches;
  }

  body {
    background-color: var(--color-paper-10);
  }

  // Set default theme to light unless the user prefers dark.
  @include apply.light-base;
  @media (prefers-color-scheme: dark) {
    @include apply.dark-base;
  }
}

@mixin all-swatches {
  // For each theme...
  @each $name, $theme in $-themes {
    // Get the paper shade function and create css custom properties for each
    // paper swatch.
    $paper-shade-function: map.get($theme, "paper-shade-function");
    --color-#{$name}-paper-0: #{meta.call($paper-shade-function, 0)};
    --color-#{$name}-paper-10: #{meta.call($paper-shade-function, 10)};
    --color-#{$name}-paper-20: #{meta.call($paper-shade-function, 20)};
    --color-#{$name}-paper-30: #{meta.call($paper-shade-function, 30)};

    // Get the ink shade function and create css custom properties for each
    // ink swatch.
    $ink-shade-function: map.get($theme, "ink-shade-function");
    --color-#{$name}-ink-100: #{meta.call($ink-shade-function, 100)};
    --color-#{$name}-ink-90: #{meta.call($ink-shade-function, 90)};
    --color-#{$name}-ink-80: #{meta.call($ink-shade-function, 80)};
    --color-#{$name}-ink-70: #{meta.call($ink-shade-function, 70)};
    --color-#{$name}-ink-60: #{meta.call($ink-shade-function, 60)};
    --color-#{$name}-ink-50: #{meta.call($ink-shade-function, 50)};
    --color-#{$name}-ink-40: #{meta.call($ink-shade-function, 40)};
    --color-#{$name}-ink-30: #{meta.call($ink-shade-function, 30)};
    --color-#{$name}-ink-20: #{meta.call($ink-shade-function, 20)};
    --color-#{$name}-ink-10: #{meta.call($ink-shade-function, 10)};

    // Add the accent/on-accent/shadow colors.
    @each $color-name in color-list.$color-list {
      --color-#{$name}-#{$color-name}: #{map.get($theme, $color-name)};
    }
  }

  // For each custom color...
  @each $color-name, $themes in $-custom-colors {
    // For each theme this custom color has a value for..
    @each $theme-name, $color in $themes {
      // Create a css custom property for this color in this theme.
      --color-#{$theme-name}-#{$color-name}: #{$color};
    }
  }
}
